#!/usr/bin/env bash
readonly BASH_BINARY="$(which bash)"
readonly TERMV_SCRIPT_NAME="$(basename "$0")"
readonly TERMV_VERSION=2.0

TERMV_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/termv"
TERMV_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/termv"

TERMV_DEPS=(curl fzf)

TERMV_isINSTALLED=${TERMV_isINSTALLED:-true}

CHANNEL_COUNT=0
declare -A CHANNEL_NAME
declare -A CHANNEL_SOURCE
declare -A CHANNEL_TYPE

has() {
	case "$(command -v "$1" 2>/dev/null)" in alias*|"") return 1 ; esac
}

need(){
	local prog ; local dependencies_not_installed ;
	for prog in $@; do ! has "$prog" && dependencies_not_installed="${dependencies_not_installed}${prog}, " ; done
	[ -n "${dependencies_not_installed}" ] && { echo "err : missing dependencies, please install: ${dependencies_not_installed%??}."; return 1 ;}
	return 0
}

prnt_log() {
	[[ "${TERMV_LOG:-false}" == false ]] && return 0
	echo "$@"
}

add_src(){
	CHANNEL_COUNT=$((CHANNEL_COUNT+1)); CHANNEL_NAME[$CHANNEL_COUNT]="${1:?}"; CHANNEL_SOURCE[$CHANNEL_COUNT]="${2:?}"; CHANNEL_TYPE[$CHANNEL_COUNT]="${3:?}"
}

download_file(){
	local old_etag new_etag
	local filename=$1; local URL=$2

	local filePath="${TERMV_CACHE_DIR:?}/${filename}"
	local etagPath="${TERMV_CACHE_DIR:?}/${filename}_etag"
	local tmp_filePath="${TERMV_CACHE_DIR:?}/${filename}_tmp"

	printf '%s' "Downloading ${filename:?}... "

	[ -f "${etagPath:?}" ] && old_etag=$(<"${etagPath}") || old_etag="null"

	curl -s "${URL}" --etag-compare "${etagPath:?}" --etag-save "${etagPath:?}" -o "${tmp_filePath:?}" \
		 -H "accept-encoding:gzip" --compressed && downloaded=true || downloaded=false

	new_etag=$(<"${etagPath}")

	if [ "${downloaded}" ] && [ "${new_etag}" = "${old_etag}" ]; then
		touch "${filePath:?}" ;
		printf '\033[33;1m %s \033[0m\n' "Already up to date." ;
		return 0
	elif [ "${downloaded}" ]; then
		mv -f "${tmp_filePath:?}" "${filePath:?}"
		printf '\033[32;1m %s \033[0m\n' "Done!" ;
		return 0
	else
		rm -f "${etagPath:?}" "${tmp_filePath:?}"
		echo "${oldetag}" > "${etagPath}"
		printf '\033[31;1m %s \033[0m\n' "Uh oh, failed!"
		return 1
	fi
}

if ! has "${TERMV_SCRIPT_NAME:-termv}" ;then
	prnt_log "wrn : ${TERMV_SCRIPT_NAME:-termv} in not intalled in your path file"
	TERMV_isINSTALLED=false
	TERMV_CONFIG_DIR="$PWD/config"
	TERMV_CACHE_DIR="$PWD/cache"
fi

if [ -f "${TERMV_CONFIG_DIR}/config" ] ; then
	prnt_log "log : loading config file from \`${TERMV_CONFIG_DIR}/config\`"
	. "${TERMV_CONFIG_DIR}/config"
else
	prnt_log "wrn : you don't have a config file; using the default settings"
fi

need ${TERMV_DEPS[@]} || exit 1

mkdir -p "${TERMV_CACHE_DIR:?}"

